"application" module

"control" useModule
"owner" useModule
"program" useModule

"maingame" useModule
"assets" useModule

Application: [{
  systemRef: Natx;

  setSystem: [storageAddress @systemRef set] func;
  getSystem: [systemRef System Ref cast] func;

  GameState: {
    MainGame: 0n8;
    MainMenu: 1n8;
  };
  
  currentState: Nat8;

  init: [
    "Halloween" getSystem.setWindowName
    GameState.MainGame copy !currentState
  ] func;

  draw: [
    system: getSystem;

    GameState.MainGame currentState =
    [ MainGame.draw ] when
  ] func;

  onContextCreate: [
    initAssets
    MainGame.init
  ] func;

  onClose: [
    DEBUG ["application.stop" print LF print] when
    getSystem.stop
  ] func;

  onDraw: [
    draw
  ] func;

  onWindowShow: [
    windowSize:;
    DEBUG ["onWindowShow " print 0 windowSize @ print " " print 1 windowSize @ print LF print] when
    #TODO
  ] func;

  onWindowHide: [
    #TODO
    DEBUG ["onWindowHide" print LF print] when
  ] func;

  onWindowFocusGain: [
    #TODO
    DEBUG ["onWindowFocusGain" print LF print] when
  ] func;

  onWindowFocusLose: [
    #TODO
    DEBUG ["onWindowFocusLose" print LF print] when
  ] func;

  onWindowResize: [
    newWindowSize:;
    DEBUG ["onWindowResize " print 0 newWindowSize @ print " " print 1 newWindowSize @ print LF print] when
  ] func;

  onKeyPress: [
    key: copy;
    DEBUG ["onKeyPress " print key print LF print] when
    Cond
    #TODO
  ] func;

  onKeyRelease: [
    key: copy;
    DEBUG ["onKeyRelease " print key print LF print] when
    #TODO
  ] func;

  onCharacter: [
    character: copy;
    DEBUG ["onCharacter " print character print LF print] when
    Cond
    #TODO
  ] func;

  onMousePosition: [
    mousePosition:;
    DEBUG ["onMousePosition " print 0 mousePosition @ print " " print 1 mousePosition @ print LF print] when
    #TODO
  ] func;

  onMouseDelta: [
    mouseDelta:;
    DEBUG ["onMouseDelta " print 0 mouseDelta @ print " " print 1 mouseDelta @ print LF print] when
    #TODO
  ] func;

  onMouseWheel: [
    delta: copy;
    DEBUG ["onMouseWheel " print delta print LF print] when
    #TODO
  ] func;
} dynamic] func;
