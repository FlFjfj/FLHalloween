"algebra" module

"control" useModule

Vector: [array] func;
Matrix: [rowCount:; Vector rowCount Vector] func;

isVector?: [v:; FALSE] func;
isVector?: [v:; 0 @v fieldCount array TRUE] [v:; TRUE] pfunc;

isMatrix?: [m:; FALSE] func;
isMatrix?: [
  m:;
  colCount: 0 @m @ fieldCount;
  @m isVector?
  @m fieldCount [
    v: i @m @;
    @v isVector?
    @v fieldCount colCount = and and
  ] times
] [m:; TRUE] pfunc;

getColCount: [isMatrix?] [m:; 0 m @ fieldCount] pfunc;

getRowCount: [isMatrix?] [fieldCount] pfunc;

-: [
  v1:v2:;;
  v1 isVector?
  v2 isVector? and
  v1 fieldCount v2 fieldCount = and
] [
  v1:v2:;;
  (v1 fieldCount [i v1 @ i v2 @ -] times)
] pfunc;

+: [
  v1:v2:;;
  v1 isVector?
  v2 isVector? and
  v1 fieldCount v2 fieldCount = and
] [
  v1:v2:;;
  (v1 fieldCount [i v1 @ i v2 @ +] times)
] pfunc;

=: [
  v1:v2:;;
  v1 isVector?
  v2 isVector? and
  v1 fieldCount v2 fieldCount = and
] [
  v1:v2:;;
  result: TRUE;
  v1 fieldCount [
    i v1 @ i v2 @ = result and !result
  ] times

  result
] pfunc;

=: [
  v1:m2:;;
  v1 isVector?
  v1 isMatrix? not and
  m2 isMatrix? and
  v1 fieldCount m2 getColCount = and
  m2 getRowCount 1 = and
] [
  v1:m2:;;
  result: TRUE;
  v1 fieldCount [
    i v1 @ i 0 m2 @ @ = result and !result
  ] times
] pfunc;

/: [
  vector:value:;;
  vector isVector?
] [
  vector:value:;;
  (vector fieldCount [i vector @ value /] times)
] pfunc;

*: [
  vector:value:;;
  vector isVector?
] [
  vector:value:;;
  (vector fieldCount [i vector @ value *] times)
] pfunc;

*: [
  value:vector:;;
  vector isVector?
] [
  value:vector:;;
  (vector fieldCount [i vector @ value *] times)
] pfunc;

*: [
  m1:m2:;;
  m1 isMatrix? m2 isMatrix? and
  m1 getColCount m2 getRowCount = and
] [
  m1:m2:;;
  result: 0 0 m1 @ @ m2 getColCount m1 getRowCount Matrix;
  m1 getRowCount [ row0: i;
    m2 getColCount [ col1: i;
      0 row0 m1 @ @
      col1 0 m2 @ @ *
      col1 row0 @result @ @ set
      m1 getColCount 1 - [ col0: i 1 +;
        col0 row0 m1 @ @
        col1 col0 m2 @ @ *
        col1 row0 result @ @ +
        col1 row0 @result @ @ set
      ] times
    ] times
  ] times

  result
] pfunc;

*: [
  v1:m2:;;
  v1 isVector?
  v1 isMatrix? not and
  m2 isMatrix? and
  v1 fieldCount m2 getRowCount = and
] [m1:m2:;; (m1) m2 *] pfunc;

|: [
  m1:m2:;;
  m1 isMatrix?
  m2 isMatrix? and
  m1 getColCount m2 getColCount = and
] [
  (
    m1 getRowCount [i m1 @ copy] times
    m2 getRowCount [i m2 @ copy] times
  )
] pfunc;

&: [
  m1:m2:;;
  m1 isMatrix?
  m2 isMatrix? and
  m1 getRowCount m2 getRowCount = and
] [
  (
    m1 getRowCount [ row: i;
      (
        m1 getColCount [i row m1 @ @ copy] times
        m2 getColCount [i row m2 @ @ copy] times
      )
    ] times
  )
] pfunc;


trans: [
  v:;
  v isVector?
  v isMatrix? not and
] [
  v:;
  (v fieldCount [(i v @)] times)
] pfunc;

trans: [isMatrix?] [
  m:;
  result: 0 0 m @ m getRowCount m getColCount Matrix;
  m getRowCount [ row: i;
    m getColCount [ col: i;
      col row m @ @
      row col @result @ set
    ] times
  ] times

  result
] pfunc;

det: [
  m:;
  m isMatrix?
  m getColCount 1 = and
  m getRowCount 1 = and
] [m:; 0 0 m @ copy] pfunc;

det: [
  m:;
  m isMatrix?
  m getColCount 2 = and
  m getRowCount 2 = and
] [
  m:;
  0 0 m @ @
  1 1 m @ @ *
  1 0 m @ @
  0 1 m @ @ * -
] pfunc;

det: [
  m:;
  m isMatrix?
  m getColCount 3 = and
  m getRowCount 3 = and
] [
  m:;
  1 0 m @ @
  2 1 m @ @ *
  2 0 m @ @
  1 1 m @ @ * -
  0 2 m @ @ *

  2 0 m @ @
  0 1 m @ @ *
  0 0 m @ @
  2 1 m @ @ * -
  1 2 m @ @ * +

  0 0 m @ @
  1 1 m @ @ *
  1 0 m @ @
  0 1 m @ @ * -
  2 2 m @ @ * +
] pfunc;

det: [
  m:;
  m isMatrix?
  m getColCount 4 = and
  m getRowCount 4 = and
] [
  m:;
  m00_11: 0 0 m @ @ 1 1 m @ @ *;
  m00_12: 0 0 m @ @ 2 1 m @ @ *;
  m00_13: 0 0 m @ @ 3 1 m @ @ *;
  m01_10: 1 0 m @ @ 0 1 m @ @ *;
  m01_12: 1 0 m @ @ 2 1 m @ @ *;
  m01_13: 1 0 m @ @ 3 1 m @ @ *;
  m02_10: 2 0 m @ @ 0 1 m @ @ *;
  m02_11: 2 0 m @ @ 1 1 m @ @ *;
  m02_13: 2 0 m @ @ 3 1 m @ @ *;
  m03_10: 3 0 m @ @ 0 1 m @ @ *;
  m03_11: 3 0 m @ @ 1 1 m @ @ *;
  m03_12: 3 0 m @ @ 2 1 m @ @ *;

  m03_12 m02_13 - 1 2 m @ @ * m01_13 m03_11 - 2 2 m @ @ * + m02_11 m01_12 - 3 2 m @ @ * + 0 3 m @ @ *
  m03_10 m00_13 - 2 2 m @ @ * m00_12 m02_10 - 3 2 m @ @ * + m02_13 m03_12 - 0 2 m @ @ * + 1 3 m @ @ * +
  m01_10 m00_11 - 3 2 m @ @ * m03_11 m01_13 - 0 2 m @ @ * + m00_13 m03_10 - 1 2 m @ @ * + 2 3 m @ @ * +
  m01_12 m02_11 - 0 2 m @ @ * m02_10 m00_12 - 1 2 m @ @ * + m00_11 m01_10 - 2 2 m @ @ * + 3 3 m @ @ * +
] pfunc;

adj: [
  m:;
  m isMatrix?
  m getColCount 1 = and
  m getRowCount 1 = and
] [
  ((0 0 m @ @ 0 0 m @ @ /))
] pfunc;

adj: [
  m:;
  m isMatrix?
  m getColCount 2 = and
  m getRowCount 2 = and
] [
  m:;
  (
    (1 1 m @ @     1 0 m @ @ neg)
    (0 1 m @ @ neg 0 0 m @ @)
  )
] pfunc;

adj: [
  m:;
  m isMatrix?
  m getColCount 3 = and
  m getRowCount 3 = and
] [
  m:;
  (
    (
      1 1 m @ @ 2 2 m @ @ * 2 1 m @ @ 1 2 m @ @ * -
      1 2 m @ @ 2 0 m @ @ * 2 2 m @ @ 1 0 m @ @ * -
      1 0 m @ @ 2 1 m @ @ * 2 0 m @ @ 1 1 m @ @ * -
    )
    (
      2 1 m @ @ 0 2 m @ @ * 0 1 m @ @ 2 2 m @ @ * -
      2 2 m @ @ 0 0 m @ @ * 0 2 m @ @ 2 0 m @ @ * -
      2 0 m @ @ 0 1 m @ @ * 0 0 m @ @ 2 1 m @ @ * -
    )
    (
      0 1 m @ @ 1 2 m @ @ * 1 1 m @ @ 0 2 m @ @ * -
      0 2 m @ @ 1 0 m @ @ * 1 2 m @ @ 0 0 m @ @ * -
      0 0 m @ @ 1 1 m @ @ * 1 0 m @ @ 0 1 m @ @ * -
    )
  )
] pfunc;

adj: [
  m:;
  m isMatrix?
  m getColCount 4 = and
  m getRowCount 4 = and
] [
  m:;
  m00_11: 0 0 m @ @ 1 1 m @ *;
  m00_12: 0 0 m @ @ 2 1 m @ *;
  m00_13: 0 0 m @ @ 3 1 m @ *;
  m00_21: 0 0 m @ @ 1 2 m @ *;
  m00_22: 0 0 m @ @ 2 2 m @ *;
  m00_23: 0 0 m @ @ 3 2 m @ *;
  m01_10: 1 0 m @ @ 0 1 m @ *;
  m01_12: 1 0 m @ @ 2 1 m @ *;
  m01_13: 1 0 m @ @ 3 1 m @ *;
  m01_20: 1 0 m @ @ 0 2 m @ *;
  m01_22: 1 0 m @ @ 2 2 m @ *;
  m01_23: 1 0 m @ @ 3 2 m @ *;
  m02_10: 2 0 m @ @ 0 1 m @ *;
  m02_11: 2 0 m @ @ 1 1 m @ *;
  m02_13: 2 0 m @ @ 3 1 m @ *;
  m02_20: 2 0 m @ @ 0 2 m @ *;
  m02_21: 2 0 m @ @ 1 2 m @ *;
  m02_23: 2 0 m @ @ 3 2 m @ *;
  m03_10: 3 0 m @ @ 0 1 m @ *;
  m03_11: 3 0 m @ @ 1 1 m @ *;
  m03_12: 3 0 m @ @ 2 1 m @ *;
  m03_20: 3 0 m @ @ 0 2 m @ *;
  m03_21: 3 0 m @ @ 1 2 m @ *;
  m03_22: 3 0 m @ @ 2 2 m @ *;
  m10_21: 0 1 m @ @ 1 2 m @ *;
  m10_22: 0 1 m @ @ 2 2 m @ *;
  m10_23: 0 1 m @ @ 3 2 m @ *;
  m11_20: 1 1 m @ @ 0 2 m @ *;
  m11_22: 1 1 m @ @ 2 2 m @ *;
  m11_23: 1 1 m @ @ 3 2 m @ *;
  m12_20: 2 1 m @ @ 0 2 m @ *;
  m12_21: 2 1 m @ @ 1 2 m @ *;
  m12_23: 2 1 m @ @ 3 2 m @ *;
  m13_20: 3 1 m @ @ 0 2 m @ *;
  m13_21: 3 1 m @ @ 1 2 m @ *;
  m13_22: 3 1 m @ @ 2 2 m @ *;
  (
    (
      m12_23 m13_22 - 1 3 m @ @ * m13_21 m11_23 - 2 3 m @ @ * m11_22 m12_21 - 3 3 m @ @ * + +
      m03_22 m02_23 - 1 3 m @ @ * m01_23 m03_21 - 2 3 m @ @ * m02_21 m01_22 - 3 3 m @ @ * + +
      m02_13 m03_12 - 1 3 m @ @ * m03_11 m01_13 - 2 3 m @ @ * m01_12 m02_11 - 3 3 m @ @ * + +
      m03_12 m02_13 - 1 2 m @ @ * m01_13 m03_11 - 2 2 m @ @ * m02_11 m01_12 - 3 2 m @ @ * + +
    )
    (
      m13_22 m12_23 - 0 3 m @ @ * m10_23 m13_20 - 2 3 m @ @ * m12_20 m10_22 - 3 3 m @ @ * + +
      m02_23 m03_22 - 0 3 m @ @ * m03_20 m00_23 - 2 3 m @ @ * m00_22 m02_20 - 3 3 m @ @ * + +
      m03_12 m02_13 - 0 3 m @ @ * m00_13 m03_10 - 2 3 m @ @ * m02_10 m00_12 - 3 3 m @ @ * + +
      m02_13 m03_12 - 0 2 m @ @ * m03_10 m00_13 - 2 2 m @ @ * m00_12 m02_10 - 3 2 m @ @ * + +
    )
    (
      m11_23 m13_21 - 0 3 m @ @ * m13_20 m10_23 - 1 3 m @ @ * m10_21 m11_20 - 3 3 m @ @ * + +
      m03_21 m01_23 - 0 3 m @ @ * m00_23 m03_20 - 1 3 m @ @ * m01_20 m00_21 - 3 3 m @ @ * + +
      m01_13 m03_11 - 0 3 m @ @ * m03_10 m00_13 - 1 3 m @ @ * m00_11 m01_10 - 3 3 m @ @ * + +
      m03_11 m01_13 - 0 2 m @ @ * m00_13 m03_10 - 1 2 m @ @ * m01_10 m00_11 - 3 2 m @ @ * + +
    )
    (
      m12_21 m11_22 - 0 3 m @ @ * m10_22 m12_20 - 1 3 m @ @ * m11_20 m10_21 - 2 3 m @ @ * + +
      m01_22 m02_21 - 0 3 m @ @ * m02_20 m00_22 - 1 3 m @ @ * m00_21 m01_20 - 2 3 m @ @ * + +
      m02_11 m01_12 - 0 3 m @ @ * m00_12 m02_10 - 1 3 m @ @ * m01_10 m00_11 - 2 3 m @ @ * + +
      m01_12 m02_11 - 0 2 m @ @ * m02_10 m00_12 - 1 2 m @ @ * m00_11 m01_10 - 2 2 m @ @ * + +
    )
  )
] pfunc;

inv: [
  m:;
  m isMatrix?
  m getColCount m getRowCount = and
] [
  m adj m det /
] pfunc;

ident: [
  (
    (1.0r32 0.0r32 0.0r32 0.0r32)
    (0.0r32 1.0r32 0.0r32 0.0r32)
    (0.0r32 0.0r32 1.0r32 0.0r32)
    (0.0r32 0.0r32 0.0r32 1.0r32)
  )
] func;

rotate2d: [
  m:phi:;;
  m (
    (phi cos     phi sin 0.0r32 0.0r32)
    (phi sin neg phi cos 0.0r32 0.0r32)
    (0.0r32      0.0r32  1.0r32 0.0r32)
    (0.0r32      0.0r32  0.0r32 1.0r32)
  ) *
] func;

scale2d: [
  m:x:y:;;;
  m (
    (x copy 0.0r32 0.0r32 0.0r32)
    (0.0r32 y copy 0.0r32 0.0r32)
    (0.0r32 0.0r32 1.0r32 0.0r32)
    (0.0r32 0.0r32 0.0r32 1.0r32)
  ) *
] func;

translate2d: [
  m:x:y:;;;
  m (
    (1.0r32 0.0r32 0.0r32 x copy)
    (0.0r32 1.0r32 0.0r32 y copy)
    (0.0r32 0.0r32 1.0r32 0.0r32)
    (0.0r32 0.0r32 0.0r32 1.0r32)
  ) *
] func;
