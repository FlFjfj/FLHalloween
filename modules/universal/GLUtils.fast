"glutils" module

"control" useModule
"string" useModule
"opengl" useModule
"algebra" useModule

{
  filename: Text;
  force_channels: Int32;
  reuse_id: Nat32;
  flags: Nat32;
} Nat32 {} "SOIL_load_OGL_texture" importFunction

loadTexture: [
  name:; 0n32 0n32 4i32 name SOIL_load_OGL_texture
] func;

generateFramebuffer: [
  width:height:;;
  fbo: GLuint dynamic;
  texture: GLuint dynamic;
  @fbo 1 glGenFramebuffers
  fbo GL_FRAMEBUFFER glBindFramebuffer
  @texture 1 glGenTextures
  texture GL_TEXTURE_2D glBindTexture
  0nx GL_UNSIGNED_BYTE GL_RGBA 0i32 height width GL_RGBA Int32 cast 0i32 GL_TEXTURE_2D glTexImage2D
  GL_LINEAR Int32 cast GL_TEXTURE_MIN_FILTER GL_TEXTURE_2D glTexParameteri
  GL_LINEAR Int32 cast GL_TEXTURE_MAG_FILTER GL_TEXTURE_2D glTexParameteri
  0n32 GL_TEXTURE_2D glBindTexture
  0i32 texture GL_TEXTURE_2D GL_COLOR_ATTACHMENT0 GL_FRAMEBUFFER glFramebufferTexture2D
  GL_FRAMEBUFFER glCheckFramebufferStatus code:; code
  GL_FRAMEBUFFER_COMPLETE = not
  [ "Frame buffer error: " print code print LF print ] when


  0n32 GL_FRAMEBUFFER glBindFramebuffer
  fbo
  texture
] func;

orthographicCamera: [
  w:h:;;

  {
    width: w copy; negWidth: 2.0r32 width /;
    height: h copy; negHeight: 2.0r32 height /;
    x:y: 0.0r32 0.0r32;;
    zoom_val: 1.0r32;
    angle: 0.0r32;
    state0: (Real32 Real32);
    state1: (Real32 Real32);
    combined: Real32 4 4 Matrix;

    translate: [
      dx:dy:;;
      x dx - !x
      y dy - !y
    ] func;

    setTranslate: [
      neg !y
      neg !x
    ] func;

    zoom: [
      zoom_val * !zoom_val
    ] func;

    beforeDraw: [
      state: state1 state0 - frameTime * state0 + -1.0r32 *;
      x: 0 state @;
      y: 1 state @;
      (
        (2.0r32 width / 0.0r32          0.0r32   x width 2.0r32 / /)
        (0.0r32         2.0r32 height / 0.0r32   y height 2.0r32 / /)
        (0.0r32         0.0r32          1.0r32   0.0r32)
        (0.0r32         0.0r32          0.0r32   1.0r32)
      ) !combined
    ] func;

    update: [
      #(
      #  (2.0r32 width / 0.0r32          0.0r32   x width 2.0r32 / /)
      #  (0.0r32         2.0r32 height / 0.0r32   y height 2.0r32 / /)
      #  (0.0r32         0.0r32          1.0r32   0.0r32)
      #  (0.0r32         0.0r32          0.0r32   1.0r32)
      #) !combined
    ] func;

    getCombined: [
      #state: state1 state0 - FRAME_DURATION * state0 +;
      #x: 0 state @;
      #y: 1 state @;
      #(
      #  (2.0r32 width / 0.0r32          0.0r32   x width 2.0r32 / /)
      #  (0.0r32         2.0r32 height / 0.0r32   y height 2.0r32 / /)
      #  (0.0r32         0.0r32          1.0r32   0.0r32)
      #  (0.0r32         0.0r32          0.0r32   1.0r32)
      #) !combined
      combined storageAddress GLfloat Cref cast
    ] func;
  }
] func;

squreMesh: (
  -0.5r32 -0.5r32 0.0r32 0.0r32 1.0r32
  0.5r32 -0.5r32 0.0r32 1.0r32 1.0r32
  0.5r32  0.5r32 0.0r32 1.0r32 0.0r32

  -0.5r32 -0.5r32 0.0r32 0.0r32 1.0r32
  -0.5r32  0.5r32 0.0r32 0.0r32 0.0r32
  0.5r32  0.5r32 0.0r32 1.0r32 0.0r32
);

spriteBatch: [{
  vbo: GLuint;

  init: [
    @vbo 1i32 glGenBuffers
    vbo GL_ARRAY_BUFFER glBindBuffer
    GL_STATIC_DRAW squreMesh storageAddress squreMesh storageSize Intx cast GL_ARRAY_BUFFER glBufferData
    0n32 GL_ARRAY_BUFFER glBindBuffer
  ] func;

  draw: [
    texture:x:y:width:height:angle:modelLoc:;;;;;;;

    vbo GL_ARRAY_BUFFER glBindBuffer

    model:ident
    x y translate2d
    angle rotate2d
    width height scale2d
    ;

    0nx 5 4 * GL_FALSE GLboolean cast GL_FLOAT 3 0n32 glVertexAttribPointer
    0n32 glEnableVertexAttribArray
    3nx 4nx * 5 4 * GL_FALSE GLboolean cast GL_FLOAT 2 1n32 glVertexAttribPointer
    1n32 glEnableVertexAttribArray

    texture GL_TEXTURE_2D glBindTexture
    model storageAddress GLfloat Cref cast GL_TRUE Nat8 cast 1i32 modelLoc glUniformMatrix4fv

    6 0 GL_TRIANGLES glDrawArrays

    0n32 GL_TEXTURE_2D glBindTexture
    0n32 GL_ARRAY_BUFFER glBindBuffer

  ] func;
}
] func;

unwind: [l:; l fieldCount [i @l @ copy] times] func;
