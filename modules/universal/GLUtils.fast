"glutils" module

"control" useModule
"string" useModule
"opengl" useModule
"algebra" useModule

{
  filename: Text;
  force_channels: Int32;
  reuse_id: Nat32;
  flags: Nat32;
} Nat32 {} "SOIL_load_OGL_texture" importFunction

loadTexture: [
  name:; 0n32 0n32 4i32 name SOIL_load_OGL_texture
] func;

generateFramebuffer: [
  width:height:;;
  fbo: GLuint dynamic;
  texture: GLuint dynamic;
  @fbo 1 glGenFramebuffers
  fbo GL_FRAMEBUFFER glBindFramebuffer
  @texture 1 glGenTextures
  texture GL_TEXTURE_2D glBindTexture
  0nx GL_UNSIGNED_BYTE GL_RGBA 0i32 height width GL_RGBA Int32 cast 0i32 GL_TEXTURE_2D glTexImage2D
  GL_LINEAR Int32 cast GL_TEXTURE_MIN_FILTER GL_TEXTURE_2D glTexParameteri
  GL_LINEAR Int32 cast GL_TEXTURE_MAG_FILTER GL_TEXTURE_2D glTexParameteri
  0n32 GL_TEXTURE_2D glBindTexture
  0i32 texture GL_TEXTURE_2D GL_COLOR_ATTACHMENT0 GL_FRAMEBUFFER glFramebufferTexture2D
  GL_FRAMEBUFFER glCheckFramebufferStatus code:; code
  GL_FRAMEBUFFER_COMPLETE = not
  [ "Frame buffer error: " print code print LF print ] when


  0n32 GL_FRAMEBUFFER glBindFramebuffer
  fbo
  texture
] func;

orthographicCamera: [
  w:h:;;

  {
    width: w; negWidth: 1.0r32 width /;
    height: h; negHeight: 1.0r32 height /;
    x:y: 0.0r32 0.0r32;;
    zoom_val: 1.0r32;
    angle: 0.0r32;

    combined: 4 4 Matrix;

    translate: [
      y! x!
    ] func;

    rotate: [
      !angle
    ] func;

    zoom: [
      zoom_val * !zoom_val
    ] func;

    update: [
      ident
      negWeight zoom_val * negHeight zoom_val * scale2d
      angle rotate2d
      x y translate2d !combined
    ] func;

    getCombinedPtr: [
      combined storageAddress combined storageSize
    ] func;
  } dynamic
] func;

spriteBatch: [
  {
    draw: [
      texture:; x:; y:; angle:; modelLoc:;
    ] func;
  }
] func;
