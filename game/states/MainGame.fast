"maingame" module

"control" useModule
"string" useModule
"opengl" useModule
"glutils" useModule
"program" useModule

"assets" useModule
"worldmap" useModule
"player" useModule

WORLD_WIDTH: 1424.0r32;
WORLD_HEIGHT: 728.0r32;

MainGame: {

  map: WorldMap;
  batch: spriteBatch;
  camera: WORLD_WIDTH WORLD_HEIGHT orthographicCamera;
  startTime: Real32;
  lastMonsterTime: Real32;
  player: Player;
  monsters: Monster Array;
  init: [
    system.getTime @lastMonsterTime set
    @batch.init
    @map.init
    @player.init
    Monster.init
  ] func;

  enterState: [
    1.0r32 0.0r32 0.0r32 0.0r32 glClearColor
  ] func;

  draw: [
    GL_COLOR_BUFFER_BIT glClear
    @camera.beforeDraw
    map.drawFloor
    player.draw
    monsters fieldCount [i monsters @ .draw] times
    map.drawObj
  ] func;

  update: [
    time: system.getTime;
    time lastMonsterTime - 5.0r32 > [
      time @lastMonsterTime set
      Monster @monsters.pushBack
    ] when
    
    @map.update
    @player.update
    nMonsters: Monster Array;
    monsters fieldCount [
      i @monsters @ .update [
        i @monsters @ @nMonsters.pushBack
      ] when
    ] times
    
    nMonsters @monsters set
    @camera.update
  ] func;

};

PumpkinAnimatedShader: {
  shaderVert:
  "
  #version 330 core
  
  #define FRAME_COUNT 7.0
  #define FRAME_TIME 0.15
  
  layout (location = 0) in vec3 aPosition;
  layout (location = 1) in vec2 aCoord;

  uniform mat4 u_projTrans;
  uniform mat4 u_modelTrans;
  uniform float u_Time;
  
  out vec2 vCoord;
  flat out float vFrame;
  
  void main() {
    vFrame = int((u_Time - int(u_Time)) * FRAME_COUNT);
    vCoord = aCoord;
    gl_Position = u_projTrans * u_modelTrans * vec4(aPosition, 1.0);
  }
  ";

  shaderFrag:
  "
  #version 330 core

  #define FRAME_COUNT 7.0 
  
  precision mediump float;
  
  in vec2 vCoord;
  flat in float vFrame;
  
  out vec4 color;
  
  uniform sampler2D u_Texture;
  
  void main() {
    color = texture(u_Texture, vec2((vCoord.x + vFrame) / FRAME_COUNT), vCoord.y);
  }
  ";

};
