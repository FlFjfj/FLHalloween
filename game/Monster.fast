"monster" module

"control" useModule
"algebra" useModule
"opengl" useModule
"randomLCG" useModule
random: RandomLCG;
getRandomCoords: [
  (@random.getr32 1000.0r32 * 500.0r32 -  @random.getr32  1000.0r32 * 500.0r32 -)
] func;

Monster: [{
  state0: getRandomCoords;
  state1: state0 copy;
  health: 1.0r32;
  moveDir: MonsterConst.DIR_NONE copy;
  speed: 75.0r32;

  lamp: 0i32;

  init: [
    MonsterConst.initialized not [
      (
        assets.ghostStand copy
        assets.ghostBack copy
        assets.ghostFront copy
        assets.ghostSideLeft copy
        assets.ghostSideRight copy
      ) @MonsterConst.@texture set
      MonsterAnimatedShader.shaderVert MonsterAnimatedShader.shaderFrag
      (
        ("u_modelTrans" @MonsterConst.@modelLoc)
        ("u_projTrans"  @MonsterConst.@projLoc)
        ("u_Time"       @MonsterConst.@timeLoc)
        ("u_position"  @MonsterConst.@lightPosLoc)
        ("u_radius"    @MonsterConst.@lightRadLoc)
        ("u_color"     @MonsterConst.@lightColorLoc)
        ("u_used"      @MonsterConst.@lightUsedLoc)
      ) loadShader @MonsterConst.@shader set
      TRUE @MonsterConst.@initialized set
    ] when

    @lightSys.reserveLight !lamp
    lamp -1i32 =
    [ "Light unavailable" print LF print ]
    [
      (0.5r32 0.0r32 0.5r32) lamp @lightSys.@color @ set
      200.0r32 lamp @lightSys.@radius @ set
    ] if

  ] func;

  draw: [
    MonsterConst.shader glUseProgram
    coords: state0 state1 state0 - frameTime * +;
    getTime MonsterConst.timeLoc glUniform1f
    camera.getCombined GL_TRUE Nat8 cast 1i32 MonsterConst.projLoc glUniformMatrix4fv
    lightSys.getColor    lightSys.MAXIMUM MonsterConst.lightColorLoc glUniform3fv
    lightSys.getPosition lightSys.MAXIMUM MonsterConst.lightPosLoc   glUniform2fv
    lightSys.getRadius   lightSys.MAXIMUM MonsterConst.lightRadLoc   glUniform1fv
    lightSys.getUsed     lightSys.MAXIMUM MonsterConst.lightUsedLoc  glUniform1fv

    moveDir MonsterConst.texture @
    coords unwind
    MonsterConst.WIDTH
    MonsterConst.HEIGHT
    0.0r32
    MonsterConst.modelLoc batch.draw
    0n32 glUseProgram

    lamp -1 = not
    [
      coords lamp @lightSys.@position @ set
      (1.0r32 health - 0.0r32 health copy) lamp @lightSys.@color @ set
    ] when
  ] func;

  update: [
    #MonsterConst.DIR_NONE copy !moveDir
    #state1 @state0 set
    #direction: player.state1 state1 -;
    #
    #0 direction @ 1.0r32 > [
    #  MonsterConst.DIR_RIGHT copy !moveDir
    #] when
    #
    #0 direction @ -1.0r32 < [
    #  MonsterConst.DIR_LEFT copy !moveDir
    #] when
    #
    #1 direction @ 1.0r32 > [
    #  MonsterConst.DIR_UP copy !moveDir
    #] when
    #
    #1 direction @ -1.0r32 < [
    #  MonsterConst.DIR_DOWN copy !moveDir
    #] when
    #
    #direction len PlayerConst.WIDTH 2.0r32 / > [
    #  newState1: direction normalize speed * FRAME_DURATION * state0 +;
    #  newState1 toLegs isOnWall? ~ [
    #    newState1 @state1 set
    #  ] when
    #] [
    #  player.health FRAME_DURATION MonsterConst.SECONDS_TO_KILL / - @player.!health
    #] if

    dies: health 0.0r32 <;
    dies [
      #player.exp MonsterConst.EXP_FOR_KILL + @player.!exp
      #player.exp 1.0r32 > [
      #  1.0r32  @player.!exp
      #] when

      lamp -1 = not
      [lamp @lightSys.freeLight] when
      #"monster dead, player total exp: " print player.exp print LF print
    ] when

    dies not
  ] func;

  toLegs: [
    (0.0r32 PlayerConst.HEIGHT 2.0r32 /) -
  ] func;

  isOnWall?: [
    coords:;
    map: MainGame.map;
    result: FALSE;
    map.mapWidth [col: i;
      map.mapHeight [row: i;
        col row isWallTile? [
          tileCoords: col row map.staticMapCoordinates @ @;
          coords tileCoords - len map.R Real32 cast 22.0r32 + < result or !result
        ] when
      ] times
    ] times

    result
  ] func;

  isWallTile?: [
    MainGame.map.staticMap @ @ 2 =
  ] func;
}] func;

MonsterConst: {
  EXP_FOR_KILL: 0.1r32;
  SECONDS_TO_KILL: 3.0r32;
  initialized: FALSE;
  texture: (5 [GLuint] times);
  shader: GLuint;
  timeLoc: GLint;
  projLoc: GLint;
  modelLoc: GLint;
  lightUsedLoc: GLint;
  lightPosLoc: GLint;
  lightRadLoc: GLint;
  lightColorLoc: GLint;
  WIDTH: 100.0r32;
  HEIGHT: 150.0r32;

  DIR_NONE:  0;
  DIR_UP:    1;
  DIR_DOWN:  2;
  DIR_LEFT:  3;
  DIR_RIGHT: 4;

};


MonsterAnimatedShader: {
  shaderVert:
  "
  #version 330 core
  
  #define FRAME_COUNT 4.0
  #define FRAME_TIME 0.15
  
  layout (location = 0) in vec3 aPosition;
  layout (location = 1) in vec2 aCoord;

  uniform mat4 u_projTrans;
  uniform mat4 u_modelTrans;
  uniform float u_Time;
  
  out vec2 vCoord;
  out vec2 worldCoord;
  flat out float vFrame;
  
  void main() {
    vFrame = int((u_Time - int(u_Time)) * FRAME_COUNT);
    vCoord = aCoord;
    vec4 position = u_modelTrans * vec4(aPosition, 1.0);
    worldCoord = position.xy;
    gl_Position = u_projTrans * position;
  }
  ";

  shaderFrag:
  "
  #version 330 core

  #define FRAME_COUNT 4.0 
  
  precision mediump float;
  
  in vec2 vCoord;
  in vec2 worldCoord;
  flat in float vFrame;
  
  out vec4 color;
  
  uniform sampler2D u_Texture;
  uniform vec2  u_position[32];
  uniform vec3  u_color[32];
  uniform float u_radius[32];
  uniform float u_used[32];
  
  void main() {
    vec3 lightColor = vec3(0.0);
    for(int i = 0; i < 32; i++) {
      if(u_used[i] == 1.0){
        float len = clamp(1.0 - length(worldCoord - u_position[i]) / u_radius[i], 0.0, 1.0);
        lightColor = lightColor + u_color[i] * len * len;
      }
    }
  
    vec4 texColor = texture(u_Texture, vec2(vCoord.x, (vCoord.y + vFrame) / FRAME_COUNT));
    color = vec4(mix(texColor.xyz * lightColor, texColor.xyz, 0.05), texColor.a);
  }
  ";
};
