"player" module

"control" useModule
"algebra" useModule
"array" useModule



PlayerConst: {
  WIDTH: 100.0r32;
  HEIGHT: 150.0r32;

  DIR_NONE:  0;
  DIR_UP:    1;
  DIR_DOWN:  2;
  DIR_LEFT:  3;
  DIR_RIGHT: 4;

  PUMPKIN_RELOAD: 20n32;
};

PlayerControls: {
  keyLeft: Int32;
  keyRight: Int32;
  keyUp: Int32;
  keyDown: Int32;

  useFirst: Int32;
};

Player: [{
  texture: (5 [GLuint] times);
  shader: GLuint;
  state0: (Real32 Real32);
  state1: (Real32 Real32);

  moveDir: PlayerConst.DIR_NONE copy;

  timeLoc: GLint;
  projLoc: GLint;
  modelLoc: GLint;

  speed: 400.0r32;

  pumpkinTimer: 0n32;
  pumpkins: (0.0r32 0.0r32) (0.0r32 0.0r32) Pumpkin Array;

  init: [
    (
      assets.playerStand copy
      assets.playerBack copy
      assets.playerFront copy
      assets.playerSideLeft copy
      assets.playerSideRight copy
    ) !texture
    PlayerAnimatedShader.shaderVert PlayerAnimatedShader.shaderFrag
    (
      ("u_modelTrans" @modelLoc)
      ("u_projTrans" @projLoc)
      ("u_Time" @timeLoc)
    ) loadShader !shader

    LEFT @PlayerControls.!keyLeft
    RIGHT @PlayerControls.!keyRight
    UP @PlayerControls.!keyUp
    DOWN @PlayerControls.!keyDown
    KEY_M @PlayerControls.!useFirst

    SubResourceInit
    
  ] func;

  draw: [
    shader glUseProgram
    coords: state0 state1 state0 - frameTime * +;
    getTime timeLoc glUniform1f
    camera.getCombined GL_TRUE Nat8 cast 1i32 projLoc glUniformMatrix4fv
    moveDir texture @ coords unwind PlayerConst.WIDTH PlayerConst.HEIGHT 0.0r32 modelLoc batch.draw
    0n32 glUseProgram

    pumpkins fieldCount [ i pumpkins.at .draw ] times
  ] func;

  update: [
    PlayerConst.DIR_NONE copy !moveDir
    state1 @state0 set
    direction: (0.0r32 0.0r32) dynamic;
    PlayerControls.keyRight system.isKeyDown [
      1.0r32 0 @direction @ set
      PlayerConst.DIR_RIGHT copy !moveDir
    ] when

    PlayerControls.keyLeft system.isKeyDown [
      -1.0r32 0 @direction @ set
      PlayerConst.DIR_LEFT copy !moveDir
    ] when

    PlayerControls.keyUp system.isKeyDown [
      1.0r32 1 @direction @ set
      PlayerConst.DIR_UP copy !moveDir
    ] when

    PlayerControls.keyDown system.isKeyDown [
      -1.0r32 1 @direction @ set
      PlayerConst.DIR_DOWN copy !moveDir
    ] when

    (0.0r32 0.0r32) direction = ~ [
      newState1: direction normalize speed * FRAME_DURATION * state0 +;
      newState1 toLegs isOnWall? ~ [
        newState1 @state1 set
      ] when
    ] when

    cameraCoords: (MainGame.camera.x copy  MainGame.camera.y copy);
    playerToCamera: state1 cameraCoords -;
    #playerToCamera len WORLD_HEIGHT 2.0r32 / > [
    #  newTranslate: playerToCamera normalize WORLD_HEIGHT 2.0r32 / * state1 +;
    #  newTranslate unwind @MainGame.@camera.setTranslate
    #] when

    state0 @camera.@state0 set
    state1 @camera.@state1 set

    pumpkinTimer 1n32 + !pumpkinTimer

    PlayerControls.useFirst system.isKeyDown
    [
      pumpkinTimer PlayerConst.PUMPKIN_RELOAD >
      [
        0n32 !pumpkinTimer
        state1 direction normalize createPumpkin @pumpkins.pushBack
      ] when
    ] when


    pumpkins fieldCount [ i @pumpkins.at .update ] times
  ] func;

  toLegs: [
    (0.0r32 PlayerConst.HEIGHT 2.0r32 /) -
  ] func;

  isOnWall?: [
    coords:;
    map: MainGame.map;
    result: FALSE;
    map.mapWidth [col: i;
      map.mapHeight [row: i;
        col row isWallTile? [
          tileCoords: col row map.staticMapCoordinates @ @;
          coords tileCoords - len map.R Real32 cast 22.0r32 + < result or !result
        ] when
      ] times
    ] times

    result
  ] func;

  isWallTile?: [
    MainGame.map.staticMap @ @ 2 =
  ] func;
}] func;

PlayerAnimatedShader: {
  shaderVert:
  "
  #version 330 core
  
  #define FRAME_COUNT 4.0
  #define FRAME_TIME 0.15
  
  layout (location = 0) in vec3 aPosition;
  layout (location = 1) in vec2 aCoord;

  uniform mat4 u_projTrans;
  uniform mat4 u_modelTrans;
  uniform float u_Time;
  
  out vec2 vCoord;
  flat out float vFrame;
  
  void main() {
    vFrame = int((u_Time - int(u_Time)) * FRAME_COUNT);
    vCoord = aCoord;
    gl_Position = u_projTrans * u_modelTrans * vec4(aPosition, 1.0);
  }
  ";

  shaderFrag:
  "
  #version 330 core

  #define FRAME_COUNT 4.0 
  
  precision mediump float;
  
  in vec2 vCoord;
  flat in float vFrame;
  
  out vec4 color;
  
  uniform sampler2D u_Texture;
  
  void main() {
    color = texture(u_Texture, vec2(vCoord.x, (vCoord.y + vFrame) / FRAME_COUNT));
  }
  ";

};

SubResourceInit: [
  PumpkinStaticShader.shaderVert PumpkinStaticShader.shaderFrag
    (
      ("u_modelTrans" @PumpkinVars.@modelLoc)
      ("u_projTrans" @PumpkinVars.@projLoc)
      ("u_Time" @PumpkinVars.@timeLoc)
    ) loadShader @PumpkinVars.!shader

] func;

createPumpkin: [
  Pumpkin
] func;
