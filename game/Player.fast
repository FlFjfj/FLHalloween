"player" module

"control" useModule

Player: [
  {
    x: 0.0r32;
    y: 0.0r32;

    texture: GLuint;
    shader: GLuint;
    projLoc: GLint;
    modelLoc: GLint;

    size: 150.0r32;
    
    init: [
      assets.playerBack copy !texture
      PlayerStaticShader.shaderVert PlayerStaticShader.shaderFrag ( ("u_modelTrans" @modelLoc) ("u_projTrans" @projLoc) ) loadShader !shader

      "Player model " print modelLoc print LF print
      "Player proj " print projLoc print LF print
    ] func;

    draw: [
      shader glUseProgram
      camera.getCombined GL_FALSE Nat8 cast 1i32 projLoc glUniformMatrix4fv
      texture x y size size 0.0r32 modelLoc batch.draw
      0n32 glUseProgram
    ] func;

    update: [
      RIGHT system.isKeyDown [ x 1000.0r32 FRAME_DURATION * + !x ] when
      LEFT system.isKeyDown  [ x 1000.0r32 FRAME_DURATION * - !x ] when
      
      UP system.isKeyDown [ size 100.0r32 FRAME_DURATION * + !size ] when
      DOWN system.isKeyDown  [ size 100.0r32 FRAME_DURATION * - !size ] when
    ] func;
  }
] func;

PlayerStaticShader: {
  shaderVert:
  "
#version 330 core

  layout (location = 0) in vec3 aPosition;
  layout (location = 1) in vec2 aCoord;

  uniform mat4 u_projTrans;
  uniform mat4 u_modelTrans;

  out vec2 vCoord;
  
  void main() {
    vCoord = aCoord;
    gl_Position = u_projTrans * u_modelTrans * vec4(aPosition, 1.0);
  }
  ";

  shaderFrag:
  "
#version 330 core

  precision mediump float;
  
  in vec2 vCoord;
  out vec4 color;
  
  uniform sampler2D u_Texture;
  
  void main() {
    color = texture(u_Texture, vCoord);
  }
  ";

};
