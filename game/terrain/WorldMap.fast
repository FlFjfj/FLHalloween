"worldmap" module

"control" useModule
"assets" useModule

WorldMap: [
  {
    staticMap:(
      (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)
      (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)
      (2 1 1 1 1 1 1 1 1 1 1 1 1 5 2)
      (2 1 1 1 3 1 1 2 1 1 2 1 1 1 2)
      (2 1 2 1 1 1 1 1 1 1 1 1 5 1 2)
      (2 4 2 2 1 1 3 1 2 1 3 1 1 1 2)
      (2 1 1 1 1 1 1 1 1 1 1 1 3 1 2)
      (2 4 1 7 3 1 3 2 1 5 1 1 1 1 2)
      (2 1 5 1 1 1 1 1 1 1 3 1 1 1 2)
      (2 1 5 1 1 3 1 1 3 1 1 1 3 1 2)
      (2 1 1 1 1 4 1 1 1 7 1 1 1 1 2)
      (2 5 1 1 1 1 3 1 1 5 1 1 3 1 2)
      (2 1 1 6 3 1 1 1 1 1 3 1 1 1 2)
      (2 1 2 3 1 1 1 2 3 1 1 1 1 2 2)
      (2 1 5 2 1 1 1 4 2 1 1 5 1 1 2)
      (2 1 1 2 2 1 1 1 3 1 1 1 5 1 2)
      (2 5 2 6 4 3 1 1 2 1 5 1 1 1 2)
      (2 1 1 2 4 4 1 1 3 1 1 1 1 1 2)
      (2 3 2 3 4 1 1 1 3 3 2 3 2 2 2)
      (2 1 7 4 4 1 4 1 4 2 1 5 1 1 2)
      (2 1 5 1 1 1 4 1 1 1 1 1 1 1 2)
      (2 5 1 4 4 2 1 4 4 1 1 1 5 1 2)
      (2 1 1 1 1 1 1 1 1 1 1 5 1 1 2)
      (2 1 1 1 4 1 4 1 4 2 1 1 2 1 2)
      (2 2 3 6 1 1 1 1 4 3 2 3 2 1 2)
      (2 1 1 3 2 1 4 1 2 1 1 7 1 1 2)
      (2 3 1 2 1 4 1 5 2 1 1 2 1 5 2)
      (2 1 1 3 1 1 1 1 4 1 1 1 1 1 2)
      (2 4 1 3 5 1 6 1 4 2 1 2 1 1 2)
      (2 1 1 2 1 1 1 1 3 1 1 1 1 1 2)
      (2 1 1 2 1 1 1 3 1 1 1 2 1 1 2)
      (2 2 7 1 1 3 1 1 1 1 1 1 1 1 2)
      (2 1 1 6 1 1 1 1 1 2 1 1 2 1 2)
      (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)
      (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)
    );

    mapWidth: 0 staticMap @ fieldCount;

    mapHeight: staticMap fieldCount;

    mapCenterX: mapWidth 2 /;
    mapCenterY: mapHeight 2 /;

    staticMapCoordinates: (Real32 Real32) mapWidth mapHeight Matrix;

    R: 65i32;

    shader: GLuint;
    projLoc: GLint;
    modelLoc: GLint;
    lightUsedLoc: GLint;
    lightPosLoc: GLint;
    lightRadLoc: GLint;
    lightColorLoc: GLint;

    init: [
      DefaultTileShader.shaderVert DefaultTileShader.shaderFrag
      (
        ("u_modelTrans" @modelLoc)
        ("u_projTrans" @projLoc)
        ("u_position" @lightPosLoc)
        ("u_radius"   @lightRadLoc)
        ("u_color"    @lightColorLoc)
        ("u_used"     @lightUsedLoc)
      ) loadShader !shader

      mapHeight [row: i dynamic;
        mapWidth [col: i dynamic;
          element: col row @staticMapCoordinates @ @;

          realR: R Real32 cast;
          x: 1.5r32 WorldTiles.width * col Real32 cast *
          row Int32 cast 2 mod Real32 cast WorldTiles.sqrt32h * + ;
          y: row Real32 cast WorldTiles.height * 2.0r32 / ;


          (x copy y copy) @element set

        ] times
      ] times

      centerCoords: mapCenterX mapCenterY @staticMapCoordinates @ @ copy;

      mapHeight [row: i dynamic;
        mapWidth [col: i dynamic;
          element: col row @staticMapCoordinates @ @;
          element centerCoords - @element set
        ] times
      ] times



    ] func;

    drawFloor: [
      shader glUseProgram

      camera.getCombined GL_TRUE Nat8 cast 1i32 projLoc glUniformMatrix4fv
      lightSys.getColor    lightSys.MAXIMUM lightColorLoc glUniform3fv
      lightSys.getPosition lightSys.MAXIMUM lightPosLoc   glUniform2fv
      lightSys.getRadius   lightSys.MAXIMUM lightRadLoc   glUniform1fv
      lightSys.getUsed     lightSys.MAXIMUM lightUsedLoc  glUniform1fv

      mapHeight [row: mapHeight  i - 1 -  dynamic;
        mapWidth [col: i dynamic;
          tileType: col row staticMap @ @;
          tileType 1 = [row col WorldTiles.woodTrack.draw ]  when # [row col WorldTiles.woodWall.drawFloor] if
          tileType 2 = [row col WorldTiles.woodWall.drawFloor] when
          tileType 3 = [row col WorldTiles.homeWallObj.drawFloor] when
          tileType 4 = [row col WorldTiles.homeTrack.draw] when
          tileType 5 = [ row col WorldTiles.graveWallTile.drawFloor] when
          tileType 7 = [ row col WorldTiles.lampTile.drawFloor] when
        ] times
      ] times
      0n32 glUseProgram
    ] func;

    drawObj: [
      shader glUseProgram
      camera.getCombined GL_TRUE Nat8 cast 1i32 projLoc glUniformMatrix4fv
      mapHeight [row: mapHeight i - 1 - dynamic;
        mapWidth [col: i dynamic;
          tileType: col row staticMap @ @;
          tileType 2 = [ row col  WorldTiles.woodWall.drawObj] when
          tileType 3 = [ row col WorldTiles.homeWallObj.drawObj] when
          tileType 6 = [ row col WorldTiles.storeWallObj.drawObj] when
        ] times
      ] times
      0n32 glUseProgram
    ] func;

    update: [

    ] func;
  }
] func;

WorldTiles: {

  width: 150.0r32;
  height: 130.0r32;
  sqrt32h: 3.0r32 sqrt height * 2.0r32 /;

  init: [] func;

  woodTrack: {
    texture: assets.woodTrack;

    draw: [row: col: Int32 cast; Int32 cast;
      element: col row @staticMapCoordinates @ @;

      assets.woodTrack 0 element @ 1 element @ WorldTiles.width WorldTiles.height 0.0r32 modelLoc batch.draw
    ] func;
  };

  homeTrack: {
    texture: assets.homeTrack;

    draw: [row: col: Int32 cast; Int32 cast;
      element: col row @staticMapCoordinates @ @;

      assets.homeTrack 0 element @ 1 element @ WorldTiles.width WorldTiles.height 0.0r32 modelLoc batch.draw
    ] func;
  };

  woodWall: {
    drawFloor: [ row: col: Int32 cast; Int32 cast;
      element: col row @staticMapCoordinates @ @;

      assets.woodWallTile 0 element @ 1 element @ WorldTiles.width WorldTiles.height 0.0r32 modelLoc batch.draw
    ] func;

    drawObj: [ row: col: Int32 cast; Int32 cast;
      element: col row @staticMapCoordinates @ @;

      assets.woodWallObj 0 element @ 1 element @ WorldTiles.height 2.0r32 / + WorldTiles.width WorldTiles.height 2.0r32 * 0.0r32 modelLoc batch.draw
    ] func;


  };

  homeWallObj: {
    drawFloor: [ row: col: Int32 cast; Int32 cast;
      element: col row @staticMapCoordinates @ @;

      assets.homeWallTile 0 element @ 1 element @ WorldTiles.width WorldTiles.height 0.0r32 modelLoc batch.draw
    ] func;

    drawObj: [ row: col: Int32 cast; Int32 cast;
      element: col row @staticMapCoordinates @ @;

      assets.homeWallObj 0 element @ 1 element @ WorldTiles.height 2.0r32 / + WorldTiles.width WorldTiles.height 2.0r32 * 0.0r32 modelLoc batch.draw
    ] func;
  };

  graveWallTile: {
    drawFloor: [ row: col: Int32 cast; Int32 cast;
      element: col row @staticMapCoordinates @ @;

      assets.graveWallTile 0 element @ 1 element @ WorldTiles.width WorldTiles.height 0.0r32 modelLoc batch.draw
    ] func;
  };

  storeWallObj: {

    drawObj: [ row: col: Int32 cast; Int32 cast;
      element: col row @staticMapCoordinates @ @;

      assets.storeWallObj 0 element @ 1 element @ WorldTiles.height 2.0r32 / + WorldTiles.width WorldTiles.height 2.0r32 * 0.0r32 modelLoc batch.draw
    ] func;

  };

  lampTile: {
    drawFloor: [ row: col: Int32 cast; Int32 cast;
      element: col row @staticMapCoordinates @ @;

      assets.lampTile 0 element @ 1 element @ WorldTiles.width WorldTiles.height 0.0r32 modelLoc batch.draw
    ] func;
  };

  lampObj: {};

};

DefaultTileShader: {
  shaderVert:
  "
#version 330 core

  layout (location = 0) in vec3 aPosition;
  layout (location = 1) in vec2 aCoord;
  
  uniform mat4 u_projTrans;
  uniform mat4 u_modelTrans;
  
  out vec2 vCoord;
  out vec2 worldCoord;
  
  void main() {
    vCoord = aCoord;
    vec4 position = u_modelTrans * vec4(aPosition, 1.0);
    worldCoord = position.xy;
    gl_Position = u_projTrans * position;
  }
  ";

  shaderFrag:
  "
  #version 330 core
  precision mediump float;
  
  in vec2 vCoord;
  in vec2 worldCoord;
  
  out vec4 color;
  
  uniform sampler2D u_Texture;
  uniform vec2  u_position[32];
  uniform vec3  u_color[32];
  uniform float u_radius[32];
  uniform float u_used[32];
  
  void main() {
    vec3 lightColor = vec3(0.0);
    for(int i = 0; i < 32; i++) {
      if(u_used[i] == 1.0){
        float len = clamp(1.0 - length(worldCoord - u_position[i]) / u_radius[i], 0.0, 1.0);
        lightColor = lightColor + u_color[i] * len * len;
      }
    }  
  
    vec4 texColor = texture(u_Texture, vCoord);
    color = vec4(mix(texColor.xyz * lightColor, texColor.xyz, 0.05), texColor.a);
  }
  ";
};
