"worldmap" module

"control" useModule
"assets" useModule

WorldMap: [
  {

    staticMap:(
      (1 1 1 1 1 1)
      (1 1 1 1 1 1)
      (1 1 1 1 1 1)
      (1 1 1 1 1 1)
      (1 1 1 1 1 1)
    );

    mapWidth: 0 staticMap @ fieldCount;
    mapHeight: staticMap fieldCount;
    R: 65i32;
   

    shader: GLuint;
    projLoc: GLint;
    modelLoc: GLint;

    init: [
      DefaultTileShader.shaderVert DefaultTileShader.shaderFrag ( ("u_modelTrans" @modelLoc) ("u_projTrans" @projLoc) ) loadShader !shader
    ] func;

    draw: [
      shader glUseProgram
      camera.getCombined GL_FALSE Nat8 cast 1i32 projLoc glUniformMatrix4fv
      mapHeight [row: i dynamic;
        mapWidth [col: i dynamic;
          tileType: col row staticMap @ @;
          tileType 1 = [ row col  WorldTiles.woodTrack.draw ]  [row col WorldTiles.woodWall.draw] if

        ] times
      ] times
      0n32 glUseProgram
    ] func;

    update: [

    ] func;
  }
] func;

WorldTiles: {

  width: 300.0r32;
  height: 260.0r32;
  sqrt32h: 3.0r32 sqrt height * 2.0r32 /;
  
  init: [] func;
  
  woodTrack: {
    texture: assets.woodTrack;

    draw: [row: col: Real32 cast; Real32 cast;
      realR: R Real32 cast;
      x: 1.5r32 WorldTiles.width * col * 
         row Int32 cast 2 mod Real32 cast WorldTiles.sqrt32h * +;
      y: row WorldTiles.height * 2.0r32 /;
      
      assets.woodTrack x y WorldTiles.width WorldTiles.height 0.0r32 modelLoc batch.draw
    ] func;
  };

  woodWall: {
    draw: [row: col: ;;] func;
  };
};

DefaultTileShader: {
  shaderVert:
  "
#version 330 core

  layout (location = 0) in vec3 aPosition;
  layout (location = 1) in vec2 aCoord;

  uniform mat4 u_projTrans;
  uniform mat4 u_modelTrans;

  out vec2 vCoord;
  
  void main() {
    vCoord = aCoord;
    gl_Position = u_projTrans * u_modelTrans * vec4(aPosition, 1.0);
  }
  ";

  shaderFrag:
  "
#version 330 core

  precision mediump float;
  
  in vec2 vCoord;
  out vec4 color;
  
  uniform sampler2D u_Texture;
  
  void main() {
    color = texture(u_Texture, vCoord);
  }
  ";
};
